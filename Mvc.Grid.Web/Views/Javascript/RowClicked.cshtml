@model IEnumerable<Person>

@{
    ViewBag.Title = "MVC.Grid row clicked event binding";
}

<div class="row">
    <div class="widget example col">
        <div class="widget-header">
            <div class="fa fa-bars"></div>
            <span>Binding row clicked event</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
            @(Html
                .Grid(Model)
                .Build(columns =>
                {
                    columns.Add(model => model.Name).Titled("Name").Filterable(true);
                    columns.Add(model => model.Birthday).Titled("Birth date").Formatted("{0:d}");
                })
                .Pageable(pager =>
                {
                    pager.RowsPerPage = 3;
                })
                .Sortable()
            )
        </div>
    </div>
    <div class="widget console col">
        <div class="widget-header">
            <div class="fa fa-angle-right"></div>
            <span>Script output</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
<pre>
<code class="script-output">
</code>
</pre>
        </div>
    </div>
</div>

<div class="row">
    <div class="widget code col">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>View</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
<pre>
<code>
@@model <span class="cls">IEnumerable</span>&lt;<span class="cls">Person</span>&gt;

@@(Html
    .Grid(Model)
    .Build(columns =>
    {
        columns.Add(model => model.Name).Titled(<span class="str">"Name"</span>).Filterable(<span class="kwd">true</span>);
        columns.Add(model => model.Birthday).Titled(<span class="str">"Birth date"</span>).Formatted(<span class="str">"{0:d}"</span>);
    })
    .Pageable(pager =>
    {
        pager.RowsPerPage = 3;
    })
    .Sortable()
)
</code>
</pre>
        </div>
    </div>
    <div class="widget code col">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>Javascript</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
<pre>
<code>
$(<span class="str">'.mvc-grid'</span>).mvcgrid({
    rowClicked: <span class="kwd">function</span> (row, data, e) {
        console.log(<span class="str">'grid: '</span>, <span class="kwd">this</span>);
        console.log(<span class="str">'row: '</span>, row);
        console.log(<span class="str">'data: '</span>, data);
        console.log(<span class="str">'click event: '</span>, e);
    }
});

<span class="com">// or</span>

$(<span class="str">'.mvc-grid tr'</span>).on(<span class="str">'rowclick'</span>, <span class="kwd">function</span> (e, data, grid, originalEvent) {
    console.log(<span class="str">'row: '</span>, <span class="kwd">this</span>);
    console.log(<span class="str">'event: '</span>, e);
    console.log(<span class="str">'data: '</span>, data);
    console.log(<span class="str">'grid: '</span>, grid);
});
</code>
</pre>
        </div>
    </div>
</div>

<style>
    .selected {
        background-color: rgba(0, 0, 0, 0.075);
    }

    .mvc-grid tbody tr {
        cursor: pointer;
    }
</style>

@section scripts {
    <script>
        $('.mvc-grid').mvcgrid({
            rowClicked: function (row, data) {
                $(row).siblings().removeClass('selected');
                $(row).toggleClass('selected');
                console.log(this);
                if ($(row).hasClass('selected')) {
                    var rowData = [];
                    var columnHtml = [];

                    for (var key in data) {
                        rowData.push('    "' + key + '": "' + data[key] + '"');
                    }
                    for (var i = 0; i < this.columns.length; i++) {
                        if (this.columns[i].filter) {
                            columnHtml.push(
                                '\n' +
                                '        {\n' +
                                '            "name": "' + this.columns[i].name + '",\n' +
                                '            "filter": {\n' +
                                '                "name": "' + this.columns[i].filter.name + '",\n' +
                                '                "operator": "' + this.columns[i].filter.operator + '",\n' +
                                '                "isMulti": ' + this.columns[i].filter.isMulti + ',\n' +
                                '                "hasOptions": ' + this.columns[i].filter.hasOptions + ',\n' +
                                '                "first": {\n' +
                                '                    "method": "' + this.columns[i].filter.first.method + '",\n' +
                                '                    "value": "' + this.columns[i].filter.first.value + '"\n' +
                                '                },\n' +
                                '                "second": {\n' +
                                '                    "method": "' + this.columns[i].filter.second.method + '",\n' +
                                '                    "value": "' + this.columns[i].filter.second.value + '"\n' +
                                '                }\n' +
                                '            },\n' +
                                '            "sort": {\n' +
                                '               "order": "' + this.columns[i].sort.order + '",\n' +
                                '               "firstsOrder": "' + this.columns[i].sort.firstOrder + '",\n' +
                                '            }\n' +
                                '        }');
                        } else {
                            columnHtml.push(
                                '\n' +
                                '        {\n' +
                                '            "name": "' + this.columns[i].name + '",\n' +
                                '            "filter": null,\n' +
                                '            "sort": {\n' +
                                '               "order": "' + this.columns[i].sort.order + '",\n' +
                                '               "firstsOrder": "' + this.columns[i].sort.firstOrder + '",\n' +
                                '            }\n' +
                                '        }');
                        }
                    }

                    var rowHtml = '\ndata: {\n' + rowData.join(',\n') + '\n}';
                    var gridHtml =
                        'grid: {\n' +
                        '    "name": "' + this.name + '",\n' +
                        '    "loadingDelay": "' + (this.loadingDelay || '') + '",\n' +
                        '    "requestType": "' + this.requestType + '",\n' +
                        '    "filterMode": "' + this.filterMode + '",\n' +
                        '    "query": "' + this.query + '",\n' +
                        '    "columns": [' +
                                columnHtml.join(',') + '\n' +
                        '    ]\n' +
                        '    "pager": {\n' +
                        '        "currentPage": "' + this.pager.currentPage + '",\n' +
                        '        "element": $Query pager element,\n' +
                        '        "pages": $Query pager page elements,\n' +
                        '        "rowsPerPage": $Query rows per page element,\n' +
                        '    }\n' +
                        '}\n';

                    $('.script-output').html(rowHtml + '\n' + gridHtml);
                } else {
                    $('.script-output').html('');
                }
            }
        });
    </script>
}
