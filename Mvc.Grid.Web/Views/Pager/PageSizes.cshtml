@model IEnumerable<Person>

@{
    ViewBag.Title = "MVC.Grid pager rows per page sizes";
}

<div class="row">
    <div class="widget example col">
        <div class="widget-header">
            <div class="fa fa-bars"></div>
            <span>Pager with rows per page selection</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
            @(Html
                .Grid(Model)
                .Build(columns =>
                {
                    columns.Add(model => model.Name).Titled("Name");
                    columns.Add(model => model.Surname).Titled("Surname");
                    columns.Add(model => model.MaritalStatus).Titled("Marital status");

                    columns.Add(model => model.Age).Titled("Age");
                    columns.Add(model => model.Birthday).Titled("Birth date").Formatted("{0:d}");
                    columns.Add(model => model.IsWorking).Titled("Employed");
                })
                .Pageable(pager =>
                {
                    pager.PageSizes = new Dictionary<Int32, String> { { 0, "All" }, { 2, "2" }, { 4, "4" } };
                    pager.ShowPageSizes = true;
                    pager.RowsPerPage = 2;
                })
                .Named("select")
            )
        </div>
    </div>
    <div class="widget example col">
        <div class="widget-header">
            <div class="fa fa-bars"></div>
            <span>Pager with rows per page input</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
            @(Html
                .Grid(Model)
                .Build(columns =>
                {
                    columns.Add(model => model.Name).Titled("Name");
                    columns.Add(model => model.Surname).Titled("Surname");
                    columns.Add(model => model.MaritalStatus).Titled("Marital status");

                    columns.Add(model => model.Age).Titled("Age");
                    columns.Add(model => model.Birthday).Titled("Birth date").Formatted("{0:d}");
                    columns.Add(model => model.IsWorking).Titled("Employed");
                })
                .Pageable(pager =>
                {
                    pager.ShowPageSizes = true;
                    pager.PageSizes.Clear();
                    pager.RowsPerPage = 2;
                })
                .Named("input")
            )
        </div>
    </div>
</div>

<div class="row">
    <div class="widget code col">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>View</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
<pre>
<code>
@@model <span class="cls">IEnumerable</span>&lt;<span class="cls">Person</span>&gt;

@@(Html
    .Grid(Model)
    .Build(columns =>
    {
        columns.Add(model => model.Name).Titled(<span class="str">"Name"</span>);
        columns.Add(model => model.Surname).Titled(<span class="str">"Surname"</span>);
        columns.Add(model => model.MaritalStatus).Titled(<span class="str">"Marital status"</span>);

        columns.Add(model => model.Age).Titled(<span class="str">"Age"</span>);
        columns.Add(model => model.Birthday).Titled(<span class="str">"Birth date"</span>).Formatted(<span class="str">"{0:d}"</span>);
        columns.Add(model => model.IsWorking).Titled(<span class="str">"Employed"</span>);
    })
    .Pageable(pager =>
    {
        pager.PageSizes = <span class="kwd">new</span> <span class="cls">Dictionary</span><<span class="cls">Int32</span>, <span class="cls">String</span>> { { 0, <span class="str">"All"</span> }, { 2, <span class="str">"2"</span> }, { 4, <span class="str">"4"</span> } };
        pager.ShowPageSizes = <span class="kwd">true</span>;
        pager.RowsPerPage = 2;
    })
)
</code>
</pre>
        </div>
    </div>
    <div class="widget code col">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>View</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
<pre>
<code>
@@model <span class="cls">IEnumerable</span>&lt;<span class="cls">Person</span>&gt;

@@(Html
    .Grid(Model)
    .Build(columns =>
    {
        columns.Add(model => model.Name).Titled(<span class="str">"Name"</span>);
        columns.Add(model => model.Surname).Titled(<span class="str">"Surname"</span>);
        columns.Add(model => model.MaritalStatus).Titled(<span class="str">"Marital status"</span>);

        columns.Add(model => model.Age).Titled(<span class="str">"Age"</span>);
        columns.Add(model => model.Birthday).Titled(<span class="str">"Birth date"</span>).Formatted(<span class="str">"{0:d}"</span>);
        columns.Add(model => model.IsWorking).Titled(<span class="str">"Employed"</span>);
    })
    .Pageable(pager =>
    {
        pager.ShowPageSizes = <span class="kwd">true</span>;
        pager.PageSizes.Clear();
        pager.RowsPerPage = 2;
    })
)
</code>
</pre>
        </div>
    </div>
    <div class="widget code col">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>Controller</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
<pre>
<code>
[<span class="cls">HttpGet</span>]
<span class="kwd">public</span> <span class="cls">ViewResult</span> Index()
{
    <span class="kwd">using</span> (<span class="cls">DbContext</span> context = <span class="kwd">new</span> <span class="cls">ApplicationContext</span>())
        <span class="kwd">return</span> View(context.Set&lt;<span class="cls">Person</span>&gt;().OrderBy(model => model.Id));

    <span class="com">// Has to be ordered in database query scenarios for paging to work!</span>
}
</code>
</pre>
        </div>
    </div>
</div>
