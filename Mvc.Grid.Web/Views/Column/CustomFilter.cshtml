@model IEnumerable<Person>

@{
    ViewBag.Title = "MVC.Grid custom column filter";
}

<div class="widget example">
    <div class="widget-header">
        <div class="fa fa-bars"></div>
        <span>Filtering column with a custom filter</span>
        <div class="widget-buttons">
            <span class="fa fa-minus content-toggle"></span>
        </div>
    </div>
    <div class="widget-content">
        @(Html
            .Grid(Model)
            .Build(columns =>
            {
                columns.Add(model => model.Name).Titled("Name").Filterable(true).FilteredAs("custom");
                columns.Add(model => model.Surname).Titled("Surname").MultiFilterable(true).FilteredAs("custom");
                columns.Add(model => model.MaritalStatus).Titled("Marital status");

                columns.Add(model => model.Age).Titled("Age");
                columns.Add(model => model.Birthday).Titled("Birth date").Formatted("{0:d}");
                columns.Add(model => model.IsWorking).Titled("Employed");
            })
        )
    </div>
</div>
<div class="row">
    <div class="widget code col">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>View</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
<pre>
<code>
@@model <span class="cls">IEnumerable</span>&lt;<span class="cls">Person</span>&gt;

@@(Html
    .Grid(Model)
    .Build(columns =>
    {
        columns.Add(model => model.Name).Titled(<span class="str">"Name"</span>).Filterable(<span class="kwd">true</span>).FilteredAs(<span class="str">"custom"</span>);
        columns.Add(model => model.Surname).Titled(<span class="str">"Surname"</span>)
            .MultiFilterable(<span class="kwd">true</span>).FilteredAs(<span class="str">"custom"</span>);
        columns.Add(model => model.MaritalStatus).Titled(<span class="str">"Marital status"</span>);

        columns.Add(model => model.Age).Titled(<span class="str">"Age"</span>);
        columns.Add(model => model.Birthday).Titled(<span class="str">"Birth date"</span>).Formatted(<span class="str">"{0:d}"</span>);
        columns.Add(model => model.IsWorking).Titled(<span class="str">"Employed"</span>);
    })
)
</code>
</pre>
        </div>
    </div>
    <div class="widget code col">
        <div class="widget-header">
            <div class="fa fa-code"></div>
            <span>Javascript</span>
            <div class="widget-buttons">
                <span class="fa fa-minus content-toggle"></span>
            </div>
        </div>
        <div class="widget-content">
<pre>
<code>
<span class="kwd">var</span> CustomTextFilter = (<span class="kwd">function</span> (base) {
    MvcGridExtends(CustomTextFilter, base);

    <span class="kwd">function</span> CustomTextFilter() {
        base.apply(<span class="kwd">this</span>);

        <span class="kwd">this</span>.methods = [<span class="str">'contains'</span>];
    }

    <span class="com">// Other extension points can be found at MvcGridFilter declaration</span>
    CustomTextFilter.prototype.renderFilter = <span class="kwd">function</span> (grid, filter) {
        <span class="kwd">var</span> lang = { <span class="str">'contains'</span>: <span class="str">'Contains'</span> };

        <span class="kwd">return</span> base.prototype.renderFilter.call(<span class="kwd">this</span>, grid, filter, lang);
    };

    <span class="kwd">return</span> CustomTextFilter;
})(MvcGridFilter);

$(<span class="str">'.mvc-grid'</span>).mvcgrid({
    filters: {
        <span class="str">'custom'</span>: <span class="kwd">new</span> CustomTextFilter()
    }
});
</code>
</pre>
        </div>
    </div>
</div>

@section scripts {
    <script>
        var CustomTextFilter = (function (base) {
            MvcGridExtends(CustomTextFilter, base);

            function CustomTextFilter() {
                base.apply(this);

                this.methods = ['contains'];
            }

            CustomTextFilter.prototype.renderFilter = function (grid, filter) {
                var lang = { 'contains': 'Contains' };

                return base.prototype.renderFilter.call(this, grid, filter, lang);
            };

            return CustomTextFilter;
        })(MvcGridFilter);

        $('.mvc-grid').mvcgrid({
            filters: {
                'custom': new CustomTextFilter()
            }
        });
    </script>
}